#include<stdio.h>
#include<malloc.h>
#include<stdbool.h>
#define KEYTYPE int
#define HTLENTH 7
typedef struct MyHashSet
{
	KEYTYPE K;
	int Positon;
	struct MyHashSet* Next;
} MyHashSet;


MyHashSet* myHashSetCreate() {
	return (MyHashSet*)calloc(HTLENTH, sizeof(MyHashSet));
}

void myHashSetAdd(MyHashSet* obj, int key,int p) {//1.找是否有关键值，直到找到空2.插入并链接
	MyHashSet* tmp = obj + (abs(key) % HTLENTH);
	MyHashSet* pre = tmp;
	while (tmp = tmp->Next)
	{
		pre = tmp;
	}
	MyHashSet* s = (MyHashSet*)malloc(sizeof(MyHashSet));
	s->K = key;
	s->Positon = p;
	s->Next = NULL;
	pre->Next = s;
	return;
}

int myHashSetContains(MyHashSet* obj, int key)
{
	MyHashSet* tmp = obj + (abs(key) % HTLENTH);

	while (tmp = tmp->Next)
	{
		if (tmp->K == key)
		{
			return tmp->Positon;
		}
	}
	return -1;
}
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
	MyHashSet* HS = myHashSetCreate();
	int* tnums = (int*)malloc(2 * sizeof(int));
	for (int i = 0; i < numsSize; i++)
	{
		int psub = myHashSetContains(HS, target - nums[i]);
		if (psub > -1)
		{
			tnums[0] = psub;
			tnums[1] = i;
		}
		else
			myHashSetAdd(HS, nums[i],i);
	}
	*returnSize = 2;
	return tnums;
}
