#define _CRT_SECURE_NO_WARNINGS 1
//1.创建两个链表
#include<stdlib.h>
#include<stdio.h>
typedef struct S {
	int value;
	int expn;
	struct S* next;
}S,*P;

P Createpolyn(P p1, int n)//1.创建多项式
{
	p1 = (P)malloc(sizeof(S));//分配一个空间，大小为一个结构体，类型位结构体指针。
	p1->next = NULL;//建立头节点
	for (int i = 1; i <= n; i++)//循环n次，输入对应的系数和指数
	{
		P s = (P)malloc(sizeof(S));

		scanf("%d %d", &(s->value), &(s->expn));
		P pre = p1;//设立q的前驱节点，初始值为头节点。
		P q = pre->next;//用q来找到指数
		while (q&&q->expn<s->expn)//找到第一个比s指数大的节点，并插入之间。
		{
			pre = q;
			q = q->next;
		}
		pre->next = s;
		s->next = q;
	}
	return p1;
}
void Addpolyn(P p1, P p2)//
{
	P pa = p1->next;
	P pb = p2->next;
	P r=NULL;
	P p3 = p1;//新链表的尾结点
	while (pa&&pb)
	{
		if (pa->expn == pb->expn)//两个指数相等
		{
			if ((pa->value + pb->value) != 0)//系数之和不为零，papb向后移，删除pb。
			{
				pa->value = pa->value + pb->value;
				p3->next = pa;
				p3 = pa;
				pa = pa->next;
				r = pb; pb = pb->next; free(r);
			}
			else//系数之和为零，papb删除
			{
				r = pa; pa = pa->next; free(r);
				r = pb; pb = pb->next; free(r);
			}
		}
		else if (pa->expn < pb->expn)//pa的系数小于pb，接上p3，pa向后移动一位
		{
			p3->next = pa;
			p3 = pa;
			pa = pa->next;
		}
		else//pb的系数小于pa，pb插入到pa之前，pb向后移动一位
		{
			p3->next = pb;
			p3 = pb;
			pb = pb->next;
		}
    }
	p3->next = pa ? pa : pb;
	free(p2);
}
void print(P p)
{
	p = p->next;//指向首元结点
	while (p)//循环到p为空
	{
		printf("%d x^%d ", p->value, p->expn);
		p = p->next;
	}
	printf("\n");
}
int main()
{
	P p1=NULL; P p2=NULL;
	int n1 = 5; int n2 = 4;
	p1=Createpolyn(p1, n1);
	p2=Createpolyn(p2, n2);
	print(p1);
	print(p2);
	Addpolyn(p1, p2);
	print(p1);
	return 0;
}
