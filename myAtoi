//读入字符串并丢弃无用的前导空格
//检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。
//确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
//读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
//将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。
//如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
//如果整数数超过 32 位有符号整数范围[−231, 231 − 1] ，需要截断这个整数，使其保持在这个范围内。
//具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
//返回整数作为最终结果。
#include<limits.h>
int myAtoi(char* s) {
	int lenth = 0;
	int i = 0;
	int mark = 0;
	int value = 0;
	for (; s[lenth]; lenth++);
	if (lenth == 0)
		return 0;
	for (i = 0; s[i] == " "&&i<lenth; i++);
	if (s[i] == '-')
	{
		mark = 1;
		i++;
	}
	if (s[i] == '+')
		i++;
	if (i>=lenth||s[i]<'0' || s[i]>'9')
		return 0;
	for (i; s[i] >= '0' && s[i] <= '9' && i < lenth; i++)
	{
		if(mark==0)
			value += value * 10 + (int)s[i];
		if(mark==1)
			value -= value * 10 - (int)s[i];
		if(value>= INT_MAX / 10)
			return 
		if (value == INT_MAX / 10 || value == INT_MIN / 10)
		{
			if (i + 1 < lenth)
			{
				if(s[i+1]>=INT_MAX%10)
					return 
			
			}
		}
	}
	return value;
}
